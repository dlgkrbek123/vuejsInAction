- mvc패턴은 모던 웹앱의 청사진을 제공
- 견고하고 오래 쓰여왔다.

- 문제를 격리한다, 코드 역할을 분리
- 뷰 : 정보를 보여주는 역할
- 컨트롤러 : 뷰와 모델을 중재 
- 모델 : 비즈니스, 도메인 로직 + 데이터베이스

- 웹앱이 데스크톱의 역할을 대체하고 있는데 api콜을 마냥 기다리는것은
- 비정상적으로 보인다.

------------------------------------------------------------

- ajax가 대중화되면서 mpa로 서비스를 구성할 필요성x
- 뷰의 일부분만 업데이트하여 빠르게 반응

- mvvm은 뷰모델의 도입과 데이터바인딩이 핵심
- 아키텍쳐 전체의 중복을 최대한 감소

뷰 - 데이터바인딩 - 뷰모델

- 뷰모델
- 스토어라는 객체에 state를 유지
- 컨트롤러와 유사하게 모델에 데이터를 전달

- 데이터바인딩
- 속성값을 사용하여 뷰에 데이터를 노출

------------------------------------------------------------

- 반응형 app의 조건
1. app의 state변화를 관찰한다.
2. app전체에 state의 mutation을 전달
3. state변화에 의해 뷰가 자동 렌더링
4. 유저에게 시기 적절한 피드백을 제공


전통 dom 방식 vs vue
- 가장 큰 차이점은 연산결과를 업데이트하는 방법
- 결과가 페이지에 노출되는 방법
- 객체에서 연산하며 이를 뷰 객체에 전달해서 직접 업데이트
- state를 바꾸면 이에 대해 자동으로 처리

------------------------------------------------------------

- vue로 구현한 앱은 한개이상의 Vue인스턴스를 포함한다
- 뷰(html + css) + 데이터바인딩 && 뷰모델(javascript)
- 새로고침없이 사용가능하다!!